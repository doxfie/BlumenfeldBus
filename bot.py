import os
import asyncio
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import pytz
import html

# Config
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")

OMSK_TZ = pytz.timezone('Asia/Omsk')

# –í–æ–¥–∏—Ç–µ–ª–∏
DRIVERS = {
    '–∞–∑–æ–≤–æ': '+7 913 974 94 29',
    '–ø—Ä–∏—à–∏–±': '+7 904 322 27 37'
}

# –†–∞—Å–ø–∏—Å–∞–Ω–∏—è
SCHEDULE = {
    "from_omsk": {
        "default": [
            ("9:00", "–û–º—Å–∫ ‚Üí –¶–≤–µ—Ç–Ω–æ–ø–æ–ª—å–µ", '–ø—Ä–∏—à–∏–±'),
            ("10:30", "–û–º—Å–∫ ‚Üí –¶–≤–µ—Ç–Ω–æ–ø–æ–ª—å–µ", '–∞–∑–æ–≤–æ'),
            ("14:30", "–û–º—Å–∫ ‚Üí –¶–≤–µ—Ç–Ω–æ–ø–æ–ª—å–µ", '–ø—Ä–∏—à–∏–±'),
            ("17:00", "–û–º—Å–∫ ‚Üí –¶–≤–µ—Ç–Ω–æ–ø–æ–ª—å–µ", '–∞–∑–æ–≤–æ'),
            ("19:00", "–û–º—Å–∫ ‚Üí –¶–≤–µ—Ç–Ω–æ–ø–æ–ª—å–µ", '–ø—Ä–∏—à–∏–±'),
        ],
        "wednesday": [
            ("10:30", "–û–º—Å–∫ ‚Üí –¶–≤–µ—Ç–Ω–æ–ø–æ–ª—å–µ", '–∞–∑–æ–≤–æ'),
            ("17:00", "–û–º—Å–∫ ‚Üí –¶–≤–µ—Ç–Ω–æ–ø–æ–ª—å–µ", '–∞–∑–æ–≤–æ'),
        ],
    },
    "from_tsvetnopolye": {
        "default": [
            ("6:30", "–¶–≤–µ—Ç–Ω–æ–ø–æ–ª—å–µ ‚Üí –û–º—Å–∫", '–ø—Ä–∏—à–∏–±'),
            ("7:15", "–¶–≤–µ—Ç–Ω–æ–ø–æ–ª—å–µ ‚Üí –û–º—Å–∫", '–∞–∑–æ–≤–æ'),
            ("11:00", "–¶–≤–µ—Ç–Ω–æ–ø–æ–ª—å–µ ‚Üí –û–º—Å–∫", '–ø—Ä–∏—à–∏–±'),
            ("13:30", "–¶–≤–µ—Ç–Ω–æ–ø–æ–ª—å–µ ‚Üí –û–º—Å–∫", '–∞–∑–æ–≤–æ'),
            ("16:30", "–¶–≤–µ—Ç–Ω–æ–ø–æ–ª—å–µ ‚Üí –û–º—Å–∫", '–ø—Ä–∏—à–∏–±'),
        ],
        "weekend": [
            ("6:30", "–¶–≤–µ—Ç–Ω–æ–ø–æ–ª—å–µ ‚Üí –û–º—Å–∫", '–ø—Ä–∏—à–∏–±'),
            ("8:30", "–¶–≤–µ—Ç–Ω–æ–ø–æ–ª—å–µ ‚Üí –û–º—Å–∫", '–∞–∑–æ–≤–æ'),
            ("11:00", "–¶–≤–µ—Ç–Ω–æ–ø–æ–ª—å–µ ‚Üí –û–º—Å–∫", '–ø—Ä–∏—à–∏–±'),
            ("13:30", "–¶–≤–µ—Ç–Ω–æ–ø–æ–ª—å–µ ‚Üí –û–º—Å–∫", '–∞–∑–æ–≤–æ'),
            ("16:30", "–¶–≤–µ—Ç–Ω–æ–ø–æ–ª—å–µ ‚Üí –û–º—Å–∫", '–ø—Ä–∏—à–∏–±'),
        ],
        "wednesday": [
            ("7:15", "–¶–≤–µ—Ç–Ω–æ–ø–æ–ª—å–µ ‚Üí –û–º—Å–∫", '–∞–∑–æ–≤–æ'),
            ("13:30", "–¶–≤–µ—Ç–Ω–æ–ø–æ–ª—å–µ ‚Üí –û–º—Å–∫", '–∞–∑–æ–≤–æ'),
        ],
    }
}

def get_schedule(direction: str, weekday: int) -> list[tuple[str, str, str]]:
    if weekday == 2:
        return SCHEDULE[direction].get("wednesday", SCHEDULE[direction]["default"])
    elif weekday in [5, 6]:
        return SCHEDULE[direction].get("weekend", SCHEDULE[direction]["default"])
    return SCHEDULE[direction]["default"]

def format_schedule(today_schedule, now):
    past, upcoming = [], []
    for t, label, driver in today_schedule:
        h, m = map(int, t.split(':'))
        sched_time = now.replace(hour=h, minute=m, second=0, microsecond=0)
        (past if sched_time < now else upcoming).append((t, label, driver))
    return past, upcoming

def get_time_to_next(upcoming, now):
    if not upcoming:
        return None
    h, m = map(int, upcoming[0][0].split(':'))
    next_time = now.replace(hour=h, minute=m, second=0, microsecond=0)
    return (next_time - now) if next_time > now else (next_time + timedelta(days=1) - now)

def format_russian_date(now):
    days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    months = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è']
    return f"{days[now.weekday()]}, {now.day} {months[now.month - 1]} {now.year}, {now.strftime('%H:%M')}"

# Telegram bot
bot = Bot(token=TOKEN)
dp = Dispatcher()

def get_main_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–º—Å–∫ ‚Üí –¶–≤–µ—Ç–Ω–æ–ø–æ–ª—å–µ", callback_data="from_omsk")],
        [InlineKeyboardButton(text="–¶–≤–µ—Ç–Ω–æ–ø–æ–ª—å–µ ‚Üí –û–º—Å–∫", callback_data="from_tsvetnopolye")]
    ])

def get_back_keyboard(direction):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_{direction}")]
    ])

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=get_main_keyboard())

@dp.callback_query(F.data == "back_to_menu")
async def back_menu(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=get_main_keyboard())

@dp.callback_query(F.data.in_(["from_omsk", "from_tsvetnopolye", "refresh_from_omsk", "refresh_from_tsvetnopolye"]))
async def show_schedule(callback: types.CallbackQuery):
    now = datetime.now(OMSK_TZ)
    weekday = now.weekday()
    direction = callback.data.replace("refresh_", "")
    today_schedule = get_schedule(direction, weekday)
    past, upcoming = format_schedule(today_schedule, now)
    day_str = format_russian_date(now)
    dir_text = "–ò–∑ –û–º—Å–∫–∞" if direction == "from_omsk" else "–ò–∑ –¶–≤–µ—Ç–Ω–æ–ø–æ–ª—å—è"

    msg = f"<b>{html.escape(dir_text)} ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n<i>({html.escape(day_str)})</i>\n\n"

    if past:
        msg += "‚ùå <b>–£–∂–µ –ø—Ä–æ—à–ª–∏:</b>\n"
        for t, l, driver in past:
            msg += f"<s><b>{html.escape(t)} ‚Äî {html.escape(l)}</b></s> (–≤–æ–¥–∏—Ç–µ–ª—å: {html.escape(DRIVERS[driver])})\n"

    if upcoming:
        msg += "\n‚úÖ <b>–ï—â—ë –±—É–¥—É—Ç:</b>\n"
        for i, (t, l, driver) in enumerate(upcoming):
            t_fmt = f"<b>{html.escape(t)} ‚Äî {html.escape(l)}</b>" if i == 0 else f"{html.escape(t)} ‚Äî {html.escape(l)}"
            msg += f"{t_fmt} (–≤–æ–¥–∏—Ç–µ–ª—å: {html.escape(DRIVERS[driver])})\n"
        delta = get_time_to_next(upcoming, now)
        if delta:
            h, m = divmod(delta.seconds // 60, 60)
            msg += f"\n‚è∞ <b>–î–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ä–µ–π—Å–∞:</b> {h} —á {m} –º–∏–Ω"
    else:
        msg += "\n–°–µ–≥–æ–¥–Ω—è —Ä–µ–π—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç."

    if weekday == 2:
        msg += "\n\n‚ö†Ô∏è <b>–ü–æ —Å—Ä–µ–¥–∞–º —Ç–æ–ª—å–∫–æ 2 —Ä–µ–π—Å–∞ –û–º—Å–∫ ‚Üí –¶–≤–µ—Ç–Ω–æ–ø–æ–ª—å–µ –∏ 2 —Ä–µ–π—Å–∞ –¶–≤–µ—Ç–Ω–æ–ø–æ–ª—å–µ ‚Üí –û–º—Å–∫!</b>"

    await callback.message.edit_text(msg, reply_markup=get_back_keyboard(direction), parse_mode="HTML")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    logging.basicConfig(level=logging.WARNING)
    asyncio.run(dp.start_polling(bot))
